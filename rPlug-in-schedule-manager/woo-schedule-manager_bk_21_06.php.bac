<?php

/**
 * The plugin bootstrap file
 *
 * This file is read by WordPress to generate the plugin information in the plugin
 * admin area. This file also includes all of the dependencies used by the plugin,
 * registers the activation and deactivation functions, and defines a function
 * that starts the plugin.
 *
 * @link              https://selise.ch/
 * @since             1.0.0
 * @package           Woo_Schedule_Manager
 *
 * @wordpress-plugin
 * Plugin Name:       Woo Schedule Manager
 * Plugin URI:        https://selise.ch/
 * Description:       This is a short description of what the plugin does. It's displayed in the WordPress admin area.
 * Version:           1.0.0
 * Author:            Md Rabiul Islam
 * Author URI:        https://selise.ch/
 * License:           GPL-2.0+
 * License URI:       http://www.gnu.org/licenses/gpl-2.0.txt
 * Text Domain:       woo-schedule-manager
 * Domain Path:       /languages
 */

// If this file is called directly, abort.
if ( ! defined( 'WPINC' ) ) {
	die;
}

/**
 * Currently plugin version.
 * Start at version 1.0.0 and use SemVer - https://semver.org
 * Rename this for your plugin and update it as you release new versions.
 */
define( 'WOO_SCHEDULE_MANAGER_VERSION', '1.0.0' );

/**
 * The code that runs during plugin activation.
 * This action is documented in includes/class-woo-schedule-manager-activator.php
 */
function activate_woo_schedule_manager() {
	require_once plugin_dir_path( __FILE__ ) . 'includes/class-woo-schedule-manager-activator.php';
	Woo_Schedule_Manager_Activator::activate();
}

/**
 * The code that runs during plugin deactivation.
 * This action is documented in includes/class-woo-schedule-manager-deactivator.php
 */
function deactivate_woo_schedule_manager() {
	require_once plugin_dir_path( __FILE__ ) . 'includes/class-woo-schedule-manager-deactivator.php';
	Woo_Schedule_Manager_Deactivator::deactivate();
}

register_activation_hook( __FILE__, 'activate_woo_schedule_manager' );
register_deactivation_hook( __FILE__, 'deactivate_woo_schedule_manager' );

/**
 * The core plugin class that is used to define internationalization,
 * admin-specific hooks, and public-facing site hooks.
 */
require plugin_dir_path( __FILE__ ) . 'admin/crud-schedule-page-func.php';
require plugin_dir_path( __FILE__ ) . 'includes/class-woo-schedule-manager.php';

/**
 * Begins execution of the plugin.
 *
 * Since everything within the plugin is registered via hooks,
 * then kicking off the plugin from this point in the file does
 * not affect the page life cycle.
 *
 * @since    1.0.0
 */ 


//ajax data
function schedule_ajax_function(){ 
	 
	//get data
	$serialised = get_option( 'schedule_opening_and_closing_time' );
	$data = maybe_unserialize( $serialised );
	//print_r($serialised);
    if($serialised){
		//date and time 
		date_default_timezone_set("Europe/Zurich");  
		$recent_date =  date('d-m-Y');
		$select_date =  $_POST['selectDate'];
		
		//opening/closing time conditions 
		if(isset($_POST['shipping_type'])){ 
			  $deliveryMethod = $_POST['shipping_type'];
		}else if(isset($_SESSION['shipping_type'])){ 
			 $deliveryMethod = $_SESSION['shipping_type']; //from theme session save_delivery_date_to_session() --- page functions.php 
		}
		if($deliveryMethod == ''){
			$deliveryMethod = 'takeaway';
		}
		 
		//$_POST['shipping_type'] minhaz bhai post type from cart page
		$deliverySchedule =  $_POST['deliverySchedule']; 

		/*------ deliveryMethod takeaway start -------*/
		//if takeaway and asap selected
		if($deliveryMethod == 'takeaway' AND  $deliverySchedule == 'asap'){ 
			$delivery_method_wise_opening_time = +0;
			$delivery_method_wise_closing_time = -30; 
		}
		//if takeaway and asap schedule
		if($deliveryMethod == 'takeaway' AND  $deliverySchedule == 'schedule'){
			 
			$delivery_method_wise_opening_time = +15;
			$delivery_method_wise_closing_time = -15; 
		}
		/*------ deliveryMethod takeaway close -------*/

		/*------ deliveryMethod delivery start -------*/
		//if delivery and asap selected
		if($deliveryMethod == 'delivery' AND  $deliverySchedule == 'asap'){ 
			$delivery_method_wise_opening_time = +0;
			$delivery_method_wise_closing_time = -30; 
		}
		//if delivery and asap schedule
		if($deliveryMethod == 'delivery' AND  $deliverySchedule == 'schedule'){
			 
			$delivery_method_wise_opening_time = +60;
			$delivery_method_wise_closing_time = +0; 
		}
		/*------ deliveryMethod delivery close -------*/  


		$day_name = date("l", strtotime($select_date)); 
		//admin data from database
		$day_wise_opening_time_data   = $data[strtolower($day_name)]['opening']; //9:00
		$day_wise_closing_time_data  = $data[strtolower($day_name)]['closing']; //20:00 
		     
  		//time diff by delivery method
  		$day_wise_opening_time = date("H:i", strtotime($delivery_method_wise_opening_time.' minutes', strtotime($day_wise_opening_time_data))); 
  		$day_wise_closing_time = date("H:i", strtotime($delivery_method_wise_closing_time.' minutes', strtotime($day_wise_closing_time_data)));  
 
		$range=range(strtotime($day_wise_opening_time),strtotime($day_wise_closing_time),15*60);
		 $time_start =0; 
		/*$len = count($range);*/ 
		foreach($range as $key => $time){  //echo $time_start;
			
			echo '<option value="'.date("H:i",$time).'">'.date("H:i",$time).'</option>';
			/*
			$show_time = date("H:i",$time);
			if ($time_start == 0) {  
			//echo 'time'.$add_first_time;
			  $show_time = date("H:i", strtotime($add_first_time.' minutes', $time)); 
			} else if ($time_start == $len - 1) { 
			  $show_time = date("H:i", strtotime($add_last_time.' minutes', $time));   
			}*/   
		 $time_start++;
		} 
	}else{
		echo '<option value="">'. __('No data found.').'</option>'; //no data here
	}

	die();
} 
 
//ajax add action
add_action('wp_ajax_schedule_ajax_action', 'schedule_ajax_function');
add_action('wp_ajax_nopriv_schedule_ajax_action', 'schedule_ajax_function');


function action_woocommerce_before_checkout_form() {  ?>
	 <div class="schedule_date_time" id="schedule_date_time">
	  <?php
			//get store closed data
			$serialised_closed = get_option( 'store_closed_date' );
			$data_closed_date = maybe_unserialize( $serialised_closed );			

			//get sunday_closed data
			$serialised_sunday_closed = get_option( 'sunday_closed' );
			$data_sunday_closed_status = maybe_unserialize( $serialised_sunday_closed ); 
			//print_r($data_sunday_closed_status);

			$count_row=1;
			$count = 0;
			$closed_date = array();
			foreach($data_closed_date as $closed_date_row){
				$closed_date[] = $closed_date_row;
				$count =$count_row;
				$count_row++;
			}
			//echo$count;
			$total_days  = $count + 7; 
			$recent_date = date('d-m-Y');
			$begin = new DateTime( $recent_date);
			$end   = new DateTime( '+ '.$total_days.'day');

			$calender_with_closed_date = array();			
			for($i = $begin; $i <= $end; $i->modify('+1 day')){   
				//sunday closed condtions
				$sunday_closed_date=  $i->format("l"); 
				if($data_sunday_closed_status =='yes'){
					if($sunday_closed_date != "Sunday"){ 
						$calender_with_closed_date[] =  $i->format("Y-m-d"); 
					}
				}else{
					$calender_with_closed_date[] =  $i->format("Y-m-d"); 
				}
			} 
			$exact_date = array_diff($calender_with_closed_date, $closed_date); //removed closed date


			?>
		<!-- <p class="checkout-radio-field" id="delivery_method_field">
			<span class="delivery_method_wrapper">
			<input type="radio" class="input-radio " value="delivery" name="delivery_method" id="delivery_method_delivery">
			<label for="delivery_method_delivery" class="radio "><?php echo __('Delivery'); ?></label>
			<input type="radio" class="input-radio " value="takeaway" name="delivery_method" id="delivery_method_takeaway" checked="checked">
			<label for="delivery_method_takeaway" class="radio "><?php echo __('Takeaway');?></label>
			</span>
		</p> -->

		<p class="delivery-schedule-field checkout-radio-field" id="delivery_schedule_field">
			<span class="delivery_schedule_wrapper">
			<?php
			//if below time at 9:00 AM
			//echo $now_time =  date('d-m-Y', 'H:i a'); echo '</br>';
			$now_time =  date('H:i a'); 		
			$morning_time_stemp = strtotime($now_time);
			$checked_status = 0;   
			if($morning_time_stemp > '1624258800'){ //09:00 = 1624258800 (timeStemp For 09:00AM gmt- +2hours)
				$checked_status = 1; 
				$hide_select_wrapper_class = 'select_hide';
			 ?>
				<input type="radio" class="input-radio" value="asap" name="delivery_schedule" id="delivery_schedule_asap" checked="checked">
				<label for="delivery_schedule_asap" class="radio "><?php echo __('As Soon as Possible');?></label>
				 
			<?php } ?>  
			<input type="radio" class="input-radio " <?php if($checked_status == 0 ) { ?> checked="checked" <?php } ?> value="schedule" name="delivery_schedule" id="delivery_schedule_takeaway">
			<label for="delivery_schedule_takeaway" class="radio "><?php echo __('Schedule');?></label>
			</span> 
		</p>
		<div class="show_hide_select_wrapper <?php if($hide_select_wrapper_class) { echo $hide_select_wrapper_class; } ?>" id="show_hide_select_wrapper">
		<select name="schedule_day" id="schedule_day">
			<option value=""><?php echo __('Select date'); ?></option>
			<?php  
			foreach($exact_date as $option_date){
				echo '<option value="'.date('d-m-Y', strtotime($option_date)).'">'.date('d F Y', strtotime($option_date)).'</option>'; 
			}
			?>
		</select> 
		<select id="time_nxtday" name="schedule_time_nxt_day">
			<option value=""><?php echo __('Select time'); ?></option> 
		</select>
	   </div>
	</div>
<?php }
//add html in before checkout form
add_action( 'woocommerce_before_checkout_billing_form', 'action_woocommerce_before_checkout_form', 10, 1 );  

//close custom code

function run_woo_schedule_manager() {

	$plugin = new Woo_Schedule_Manager();
	$plugin->run();

}
run_woo_schedule_manager();
